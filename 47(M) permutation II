//47(M) permutation II

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
      List<List<Integer>> res=new ArrayList<List<Integer>>();
      List<Integer> temp=new ArrayList<Integer>();
      boolean [] b=new boolean[nums.length];
      Arrays.sort(nums);
      permuteUnique(nums,res,temp,b);
      return res;
    }
    
    public static void permuteUnique(int[] nums,List<List<Integer>> res,List<Integer> temp,boolean [] b){
        
        if(temp.size()==nums.length){
            res.add(new ArrayList<Integer> (temp)); //???
        }
        
        for(int i=0; i<nums.length; i++){
            if(i>0 && nums[i-1]==nums[i] && !b[i-1]){    //??
                continue;
            }
            if(!b[i]){
                temp.add(nums[i]);
                b[i]=true;
                permuteUnique(nums,res, temp,b);
                temp.remove(temp.size()-1);
                b[i]=false;
            }
        }
        
    }
}
